<div class="header">
  <h1>Settings</h1>
</div>

<div class="settings-list">
  <div class="setting-item">
    <div class="setting-label">Account</div>
    <div class="setting-value"><%= current_user.email %></div>
  </div>
  
  <div class="setting-item">
    <div class="setting-label">Name</div>
    <div class="setting-value"><%= current_user.name %></div>
  </div>
  
  <% if current_user.admin? %>
    <div class="setting-item">
      <div class="setting-label">Role</div>
      <div class="setting-value admin-badge">Administrator</div>
    </div>
  <% end %>
  
  <%= link_to logout_path, class: "logout-button" do %>
    Logout
  <% end %>
</div>

<% if current_user.admin? %>
  <div class="admin-section">
    <h2>Admin: Manage Bet Results</h2>
    <% betting_histories = BettingHistory.includes(:user, :dk_game).order(created_at: :desc) %>
    <% pending_count = betting_histories.pending.count %>
    <% all_count = betting_histories.count %>
    
    <div class="filter-toggle">
      <button class="filter-btn active" data-filter="pending">
        Pending Only (<span id="pendingCount"><%= pending_count %></span>)
      </button>
      <button class="filter-btn" data-filter="all">
        All Bets (<%= all_count %>)
      </button>
    </div>
    
    <% if betting_histories.any? %>
      <div class="bets-management">
        <% betting_histories.each do |bet| %>
          <div class="bet-management-item" data-result="<%= bet.result %>">
            <div class="bet-info">
              <div class="bet-user-name"><%= bet.user.name %></div>
              <div class="bet-description"><%= bet.formatted_description %></div>
              <div class="bet-meta">
                <span class="bet-week">Week <%= bet.nfl_week %></span>
                <span class="bet-stake"><%= format_currency(bet.total_stake) %></span>
                <span class="bet-date"><%= bet.created_at.in_time_zone(Time.zone).strftime('%m/%d %I:%M%p') %></span>
              </div>
            </div>
            <div class="bet-result-controls">
              <select class="result-select" data-bet-id="<%= bet.id %>">
                <option value="pending" <%= 'selected' if bet.pending? %>>Pending</option>
                <option value="win" <%= 'selected' if bet.win? %>>Win</option>
                <option value="loss" <%= 'selected' if bet.loss? %>>Loss</option>
                <option value="push" <%= 'selected' if bet.push? %>>Push</option>
              </select>
            </div>
          </div>
        <% end %>
      </div>
      
      <div id="noPendingMessage" class="empty-state hidden">
        No pending bets. All bets have been resolved.
      </div>
    <% else %>
      <div class="empty-state">No bets found.</div>
    <% end %>
  </div>
<% end %>

<style>
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    margin: 0;
    padding: 0;
    background: #111;
    color: white;
  }

  .header {
    padding: 20px;
    background: #1a1a1a;
    border-bottom: 1px solid #333;
  }

  .header h1 {
    margin: 0;
    color: white;
  }

  .settings-list {
    padding: 16px;
  }

  .setting-item {
    background: #1a1a1a;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 12px;
  }

  .setting-label {
    font-size: 14px;
    color: #888;
    margin-bottom: 4px;
  }

  .setting-value {
    font-size: 16px;
  }

  .logout-button {
    display: block;
    background: #d32f2f;
    color: white;
    text-decoration: none;
    padding: 16px;
    border-radius: 8px;
    text-align: center;
    margin-top: 24px;
    font-weight: bold;
  }

  .admin-badge {
    color: #4d9640;
    font-weight: bold;
  }

  .admin-section {
    padding: 16px;
    margin-top: 24px;
    border-top: 1px solid #333;
  }

  .admin-section h2 {
    color: white;
    margin-bottom: 16px;
  }

  .admin-actions {
    margin-bottom: 20px;
  }

  .filter-toggle {
    display: flex;
    gap: 8px;
    margin-bottom: 16px;
  }

  .filter-btn {
    flex: 1;
    padding: 12px;
    background: #212121;
    color: white;
    border: 1px solid #333;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s;
  }

  .filter-btn:hover {
    background: #2a2a2a;
  }

  .filter-btn.active {
    background: #4d9640;
    border-color: #4d9640;
  }

  .bets-management {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .bet-management-item {
    background: #1a1a1a;
    border-radius: 8px;
    padding: 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 16px;
  }

  .bet-management-item.hidden {
    display: none;
  }
  
  .hidden {
    display: none !important;
  }
  
  .empty-state {
    text-align: center;
    color: #888;
    padding: 40px 20px;
    background: #1a1a1a;
    border-radius: 8px;
    margin-top: 16px;
  }

  .bet-info {
    flex: 1;
  }

  .bet-user-name {
    font-size: 14px;
    color: #888;
    margin-bottom: 4px;
  }

  .bet-description {
    font-size: 16px;
    margin-bottom: 8px;
  }

  .bet-meta {
    display: flex;
    gap: 12px;
    font-size: 14px;
    color: #888;
  }

  .bet-result-controls {
    flex-shrink: 0;
  }

  .result-select {
    padding: 8px 12px;
    background: #212121;
    color: white;
    border: 1px solid #333;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    min-width: 120px;
  }

  .result-select:focus {
    outline: none;
    border-color: #4d9640;
  }

  .result-select option {
    background: #212121;
    color: white;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Filter toggle functionality
    const filterButtons = document.querySelectorAll('.filter-btn');
    const betItems = document.querySelectorAll('.bet-management-item');
    const noPendingMessage = document.getElementById('noPendingMessage');
    const pendingCountSpan = document.getElementById('pendingCount');
    
    function updateVisibility(filter) {
      let visibleCount = 0;
      
      betItems.forEach(item => {
        if (filter === 'pending') {
          if (item.dataset.result === 'pending') {
            item.classList.remove('hidden');
            visibleCount++;
          } else {
            item.classList.add('hidden');
          }
        } else {
          item.classList.remove('hidden');
          visibleCount++;
        }
      });
      
      // Show/hide no pending message
      if (filter === 'pending' && visibleCount === 0 && noPendingMessage) {
        noPendingMessage.classList.remove('hidden');
      } else if (noPendingMessage) {
        noPendingMessage.classList.add('hidden');
      }
    }
    
    filterButtons.forEach(btn => {
      btn.addEventListener('click', function() {
        // Update active state
        filterButtons.forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        
        const filter = this.dataset.filter;
        updateVisibility(filter);
      });
    });
    
    // Initialize with pending filter
    updateVisibility('pending');
    
    // Result change handler
    const resultSelects = document.querySelectorAll('.result-select');
    
    resultSelects.forEach(select => {
      select.addEventListener('change', function() {
        const betId = this.dataset.betId;
        const newResult = this.value;
        const selectElement = this;
        
        // Store the original value from the selected option
        const originalValue = selectElement.querySelector('option[selected]')?.value || 
                             Array.from(selectElement.options).find(opt => opt.defaultSelected)?.value ||
                             'pending';
        
        console.log(`Updating bet ${betId} from ${originalValue} to ${newResult}`);
        
        // Update via AJAX
        fetch(`/betting_histories/${betId}/update_result`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ result: newResult })
        })
        .then(response => {
          console.log('Response status:', response.status);
          if (!response.ok) {
            return response.json().then(data => {
              throw new Error(data.errors ? data.errors.join(', ') : 'Update failed');
            });
          }
          return response.json();
        })
        .then(data => {
          console.log('Update successful:', data);
          if (data.success) {
            // Update the item's data attribute
            const item = selectElement.closest('.bet-management-item');
            const oldResult = item.dataset.result;
            item.dataset.result = newResult;
            
            // Update selected attribute for persistence
            selectElement.querySelectorAll('option').forEach(opt => {
              opt.removeAttribute('selected');
              if (opt.value === newResult) {
                opt.setAttribute('selected', 'selected');
              }
            });
            
            // Update pending count
            if (oldResult === 'pending' && newResult !== 'pending') {
              const currentCount = parseInt(pendingCountSpan.textContent);
              pendingCountSpan.textContent = currentCount - 1;
            } else if (oldResult !== 'pending' && newResult === 'pending') {
              const currentCount = parseInt(pendingCountSpan.textContent);
              pendingCountSpan.textContent = currentCount + 1;
            }
            
            // Re-apply current filter
            const activeFilter = document.querySelector('.filter-btn.active').dataset.filter;
            updateVisibility(activeFilter);
            
            // Show success feedback
            const originalBg = item.style.background;
            item.style.background = '#2d5f28';
            setTimeout(() => {
              item.style.background = originalBg;
            }, 500);
          } else {
            throw new Error(data.errors ? data.errors.join(', ') : 'Update failed');
          }
        })
        .catch(error => {
          console.error('Error updating bet:', error);
          alert('Error updating bet result: ' + error.message);
          selectElement.value = originalValue;
        });
      });
    });
  });
</script>
